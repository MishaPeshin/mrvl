{"version":3,"file":"static/js/728.3d100da4.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoudary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif'\n\nconst ErrorMessage = () => {\n    return (\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\" /> /* для работы с папкой public */\n        <img src={img} alt=\"error\" style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} />\n    )\n}\n\nexport default ErrorMessage","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, []);\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011355 - 1009224) + 1009224); // большинство персонажей лежит в этом диапозоне\n\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    return (\n        <div className=\"randomchar\" >\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\"\n                    onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\n\nconst View = ({ data }) => { // компонент для рендера (не содержит логики)\n    const { name, description, thumbnail, homepage, wiki } = data;\n\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n        imgStyle = { 'objectFit': 'contain' }\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} style={imgStyle} alt=\"Random character\" className=\"randomchar__img\" />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemsLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner />;\n        case 'loading':\n            return newItemsLoading ? <Component /> : <Spinner />;\n        case 'confirmed':\n            return <Component />;\n        case 'error':\n            return <ErrorMessage />;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemsLoading, setNewItemsLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    const { getAllCharacters, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n\n    // useEffect(() => { // отрабатывает некорректно\n    //     window.addEventListener('scroll', onLoadByScroll);\n\n    //     return () => {\n    //         window.removeEventListener('sсroll', onLoadByScroll);\n    //     }\n    // }, [newItemsLoading]);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemsLoading(false) : setNewItemsLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = async (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true\n        }\n\n        const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n        for (let char of newCharList) {\n            await delay(100);\n            setCharList(charList => [...charList, char]);\n        }\n        setNewItemsLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(ended);\n    }\n\n    // const onLoadByScroll = () => {\n    //     const docElem = document.documentElement;\n    //     if ((docElem.clientHeight + window.scrollY) >= docElem.scrollHeight - 1 && !newItemsLoading && !loading) {\n    //         onRequest(offset);\n    //     }\n    // }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => {\n            item.classList.remove('char__item_selected');\n        });\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            const { name, thumbnail, id } = item;\n            let imgStyle = { 'objectFit': 'cover' };\n\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n\n            return (\n\n                <CSSTransition classNames='char__item' key={item.id} timeout={500}>\n                    <li\n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el} /* el - это ссылка на dom элемент */\n                        key={id}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i)\n                        }}\n                        onKeyUp={(e) => {\n                            if (e.key === ' ' || e.key === 'Enter') {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                        <img src={thumbnail} alt={name} style={imgStyle} />\n                        <div className=\"char__name\">{name}</div>\n                    </li>\n                </CSSTransition>\n\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemsLoading);\n    }, [process]);\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemsLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n    const { getCharacter, clearError, process, setProcess } = useMarvelService()\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    return (\n        <div className=\"char__info\" >\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\n// FSM - finite-state machine (конечного автомата)\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n        imgStyle = { 'objectFit': 'contain' }\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.lenght > 0 ? null : 'Comics not found'}\n                {\n                    comics.map((item, i) => {\n                        if (i < 10) {\n                            return (\n                                <li key={i} className=\"char__comics-item\">\n                                    {item.name}\n                                </li>\n                            )\n                        }\n                    })\n                }\n\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number,\n}\n\nexport default CharInfo;","import { useState, useEffect } from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { Link } from 'react-router-dom';\n\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const errorMessage = process === 'error' ? <div className=\"error\"><ErrorMessage /></div> : null;\n    const result = !char ? null : char.length > 0 ?\n        <div className=\"char__wrapper\">\n            <div className=\"char__message char__message_success\">There is! Visit {char[0].name} page?</div>\n            <Link to={`/characters/${char[0].id}`} className='button button__secondary'>\n                <div className='inner'>To page</div>\n            </Link>\n        </div> :\n        <div className=\"char__message char__message_error\">\n            The character was not found. Check the name and try again\n        </div>\n\n    return (\n        <div className=\"char__search\">\n            <Formik\n                initialValues={{ charName: '' }}\n                validationSchema={yup.object({\n                    charName: yup.string().required('This field is required')\n                })}\n                onSubmit={({ charName }) => {\n                    updateChar(charName)\n                }}\n            >\n                <Form className='char__form'>\n                    <label className='char__title' htmlFor='charName'>Or find a character by name:</label>\n                    <div className=\"char__wrapper\">\n                        <Field\n                            className='char__field'\n                            placeholder='Enter name'\n                            type=\"text\"\n                            id=\"charName\"\n                            name=\"charName\" />\n                        <button\n                            type=\"submit\"\n                            className='button button__main'\n                            disabled={process === 'loading'}>\n                            <div className='inner'>FIND</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage className=\"char__message char__message_error\" name=\"charName\" component=\"div\" />\n                </Form>\n            </Formik>\n            {errorMessage}\n            {result}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\n\n// предохранитель ЛОВИТ ошибки только в метод render, в методах жизненного цикла и в конструкторах дочерних компонентов\n// предохранитель НЕ ЛОВИТ ошибки в обработчиках событий(потому что события происходят вне метода render) и в асинхронном коде\nclass ErrorBoudary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage />\n        }\n\n        return this.props.children\n    }\n}\n\nexport default ErrorBoudary;","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\nimport ErrorBoudary from \"../errorBoundary/ErrorBoudary\";\nimport decoration from '../../resources/img/vision.png';\n\n\nconst MainPage = () => {\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoudary>\n                <RandomChar />\n            </ErrorBoudary>\n            <div className=\"char__content\">\n                <ErrorBoudary>\n                    <CharList onCharSelected={onCharSelected} />\n                </ErrorBoudary>\n                <div>\n                    <ErrorBoudary>\n                        <CharInfo charId={selectedChar} />\n                    </ErrorBoudary>\n                    <ErrorBoudary>\n                        <CharSearchForm />\n                    </ErrorBoudary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n        </>\n    )\n}\n\nexport default MainPage;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\n\n\n        setProcess('loading');\n        try {\n            const response = await fetch(url, { method, body, headers });\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n\n            return data;\n        } catch (e) {\n            setProcess('error');\n            throw e;\n        }\n\n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return { request, clearError, process, setProcess };\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const { request, clearError, process, setProcess } = useHttp();\n\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'; // лодаш означает что изменять эту переменную нельзя\n    const _apiKey = 'apikey=074a837690f9cea45462fd649d4b3bcb';\n    const _baseOffset = 210;\n\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    };\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'This character do not have description',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items,\n        }\n    }\n\n    const _transformComics = (comic) => {\n        return {\n            id: comic.id,\n            title: comic.title,\n            description: comic.description || 'There is no description',\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\n            price: comic.prices[0].price == 0 ? 'NOT AVAILABLE' : comic.prices[0].price + '$',\n            pages: comic.pageCount ? comic.pageCount + ' p.' : 'No information about the number of pages',\n            language: comic.textObjects.language || 'en-us',\n        }\n    }\n\n    return {\n        clearError,\n        process,\n        setProcess,\n        getAllCharacters,\n        getCharacter,\n        getCharacterByName,\n        getAllComics,\n        getComic,\n    };\n}\n\nexport default useMarvelService;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Spinner from '../components/spinner/Spinner';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton />;\n        case 'loading':\n            return <Spinner />;\n        case 'confirmed':\n            return <Component data={data} />;\n        case 'error':\n            return <ErrorMessage />;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;"],"names":["ErrorMessage","_jsx","src","img","alt","style","display","width","height","objectFit","margin","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemsLoading","setNewItemsLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","async","ended","newCharList","length","delay","ms","Promise","resolve","setTimeout","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","Error","arr","items","map","i","CSSTransition","classNames","timeout","tabIndex","ref","el","onCharSelected","onKeyUp","e","key","TransitionGroup","component","renderItems","disabled","comics","_Fragment","lenght","charId","CharSearchForm","getCharacterByName","errorMessage","result","Link","to","concat","Formik","initialValues","charName","validationSchema","yup","required","onSubmit","Form","htmlFor","Field","placeholder","type","FormikErrorMessage","ErrorBoudary","constructor","arguments","state","error","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","Helmet","content","CharList","CharInfo","decoration","request","useHttp","useCallback","url","method","undefined","body","headers","response","fetch","ok","status","json","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","comic","title","price","prices","pages","pageCount","language","textObjects","results","res","getAllComics","getComic","Skeleton"],"sourceRoot":""}