{"version":3,"file":"static/js/156.7586b73b.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif'\n\nconst ErrorMessage = () => {\n    return (\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"error\" /> /* для работы с папкой public */\n        <img src={img} alt=\"error\" style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} />\n    )\n}\n\nexport default ErrorMessage","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport setContent from '../../utils/setContent';\nimport useMarvelService from '../../services/MarvelService';\nimport AppBanner from '../appBanner/AppBanner';\n\nconst SinglePage = ({ Component, dataType }) => {\n    const { id } = useParams();\n    const [data, setData] = useState(null);\n    const { getCharacter, getComic, clearError, process, setProcess } = useMarvelService()\n\n    useEffect(() => {\n        updateData();\n    }, [id]);\n\n    const updateData = () => {\n        clearError();\n\n        switch (dataType) {\n            case 'comic':\n                getComic(id)\n                    .then(onDataLoaded)\n                    .then(() => setProcess('confirmed'))\n                break;\n            case 'character':\n                getCharacter(id)\n                    .then(onDataLoaded)\n                    .then(() => setProcess('confirmed'))\n                break;\n        }\n    }\n\n    const onDataLoaded = (data) => {\n        setData(data);\n    }\n\n    return (\n        <>\n            <AppBanner />\n            {setContent(process, Component, data)}\n        </>\n    )\n}\n\nexport default SinglePage;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\n\n\n        setProcess('loading');\n        try {\n            const response = await fetch(url, { method, body, headers });\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n\n            return data;\n        } catch (e) {\n            setProcess('error');\n            throw e;\n        }\n\n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return { request, clearError, process, setProcess };\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const { request, clearError, process, setProcess } = useHttp();\n\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'; // лодаш означает что изменять эту переменную нельзя\n    const _apiKey = 'apikey=074a837690f9cea45462fd649d4b3bcb';\n    const _baseOffset = 210;\n\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    };\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'This character do not have description',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items,\n        }\n    }\n\n    const _transformComics = (comic) => {\n        return {\n            id: comic.id,\n            title: comic.title,\n            description: comic.description || 'There is no description',\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\n            price: comic.prices[0].price == 0 ? 'NOT AVAILABLE' : comic.prices[0].price + '$',\n            pages: comic.pageCount ? comic.pageCount + ' p.' : 'No information about the number of pages',\n            language: comic.textObjects.language || 'en-us',\n        }\n    }\n\n    return {\n        clearError,\n        process,\n        setProcess,\n        getAllCharacters,\n        getCharacter,\n        getCharacterByName,\n        getAllComics,\n        getComic,\n    };\n}\n\nexport default useMarvelService;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Spinner from '../components/spinner/Spinner';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton />;\n        case 'loading':\n            return <Spinner />;\n        case 'confirmed':\n            return <Component data={data} />;\n        case 'error':\n            return <ErrorMessage />;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","img","style","display","width","height","objectFit","margin","_ref","Component","dataType","id","useParams","data","setData","useState","getCharacter","getComic","clearError","process","setProcess","useMarvelService","useEffect","updateData","then","onDataLoaded","_Fragment","setContent","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","comic","title","price","prices","pages","pageCount","language","textObjects","getAllCharacters","offset","results","map","res","getCharacterByName","getAllComics","Skeleton","Spinner"],"sourceRoot":""}